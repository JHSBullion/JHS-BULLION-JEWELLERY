// scripts/update_gold.js
// 拉 XAU/MYR（GoldAPI），把 MYR/oz → MYR/g，更新 js/data.js
// 输出：window.goldPrices（历史） + window.latestPrices（表格当前值）
// 历史保留 90 天；每日 1 条。

const fs = require('fs');
const path = require('path');
const https = require('https');

const GOLDAPI_KEY = process.env.GOLDAPI_KEY;
if (!GOLDAPI_KEY) {
  console.error('Missing GOLDAPI_KEY env! Set it as a GitHub Actions secret.');
  process.exit(1);
}

const OZT_TO_G = 31.1034768;
const PURITY = { '999.9P':0.9999,'999.9':0.9999,'999':0.999,'916':0.916,'835':0.835 };
const HISTORY_DAYS = 90; // 保留天数

function fetchGoldXauMyr() {
  const url = 'https://www.goldapi.io/api/XAU/MYR';
  const headers = { 'x-access-token': GOLDAPI_KEY, 'Accept': 'application/json' };
  return new Promise((resolve, reject) => {
    const req = https.request(url, { method:'GET', headers, timeout:15000 }, res => {
      let chunks = '';
      res.on('data', d => chunks += d);
      res.on('end', () => {
        try {
          const data = JSON.parse(chunks);
          if (!data || typeof data.price !== 'number') {
            return reject(new Error('GoldAPI invalid response: ' + chunks));
          }
          resolve(data.price); // MYR per oz
        } catch (e) {
          reject(e);
        }
      });
    });
    req.on('error', reject);
    req.on('timeout', () => { req.destroy(new Error('GoldAPI timeout')); });
    req.end();
  });
}

function readDataJs(filePath) {
  if (!fs.existsSync(filePath)) return { obj:null, raw:'' };
  const raw = fs.readFileSync(filePath, 'utf8');
  const m = raw.match(/window\.goldPrices\s*=\s*(\{[\s\S]*?\});/);
  if (!m) return { obj:null, raw };
  let obj = null;
  try { obj = (new Function(`return (${m[1]});`))(); }
  catch { obj = null; }
  return { obj, raw };
}

function buildUpdated(existingObj, myrPerGramPure) {
  const today = new Date().toISOString().slice(0,10);
  const base = existingObj && typeof existingObj==='object' ? existingObj : {};
  const out = {};
  for (const k of Object.keys(PURITY)) {
    const price = Math.round(myrPerGramPure * PURITY[k]);
    const hist = Array.isArray(base[k]?.history) ? [...base[k].history] : [];
    if (!hist.length || hist[hist.length-1].date !== today) {
      hist.push({ date: today, value: price });
    } else {
      hist[hist.length-1] = { date: today, value: price };
    }
    out[k] = { history: hist.slice(-HISTORY_DAYS) };
  }
  return out;
}

function toDataJsText(obj) {
  const pretty = JSON.stringify(obj, null, 2);

  // 生成 latestPrices，键名与页面表格一致
  const alias = {
    "999.9 BAR(P)": "999.9P",
    "999.9 BAR": "999.9",
    "999 GOLD": "999",
    "916 GOLD": "916",
    "835 GOLD": "835"
  };
  const latest = {};
  for (const label in alias) {
    const key = alias[label];
    const hist = (obj[key] && Array.isArray(obj[key].history)) ? obj[key].history : [];
    latest[label] = hist.length ? hist[hist.length - 1].value : null;
  }
  const latestPretty = JSON.stringify(latest, null, 2);

  return `// Auto-generated by GitHub Action. Unit: RM/gram
// Structure: { "TYPE": { history: [{date: "YYYY-MM-DD", value: INT}] } }
window.goldPrices = ${pretty};
window.latestPrices = ${latestPretty};
`;
}

(async () => {
  try {
    const myrPerOz = await fetchGoldXauMyr();
    const myrPerGramPure = myrPerOz / OZT_TO_G;

    const dataPath = path.join(process.cwd(), 'js', 'data.js');
    const { obj } = readDataJs(dataPath);

    const updated = buildUpdated(obj, myrPerGramPure);
    const text = toDataJsText(updated);

    fs.mkdirSync(path.dirname(dataPath), { recursive: true });
    fs.writeFileSync(dataPath, text, 'utf8');

    console.log('Updated js/data.js successfully.');
  } catch (e) {
    console.error('Updater failed:', e.message);
    process.exit(1);
  }
})();
